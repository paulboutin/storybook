@mixin screen($size, $direction: 'up') {
  $width: map-get($screens, $size);

  @if $direction == 'up' {
    @media (min-width: $width) {
      @content;
    }
  } @else if $direction == 'down' {
    @media (max-width: $width - 1px) {
      @content;
    }
  }
}

@mixin font-size($size) {
  $values: map-get($font-sizes, $size);
  font-size: map-get($values, 'font-size');
  line-height: map-get($values, 'line-height');
}

@mixin font-family($type) {
  font-family: map-get($font-families, $type);
}

@mixin font-weight($name) {
  font-weight: map-get($font-weights, $name);
}

@mixin fluid-typography() {
  $min-font-size: 16;
  $max-font-size: 24;
  $min-screen-width: 480;
  $max-screen-width: 1440;

  --min-font-size: #{$min-font-size};
  --max-font-size: #{$max-font-size};
  --min-screen-width: #{$min-screen-width};
  --max-screen-width: #{$max-screen-width};

  $font-factor: $max-font-size - $min-font-size;
  $screen-factor: $max-screen-width - $min-screen-width;

  /* prettier-ignore */
  $fluid-size: calc(#{$min-font-size}px + #{$font-factor} * ((100vw - #{$min-screen-width}px) / #{$screen-factor}));

  font-size: #{$min-font-size}px;

  @each $size, $width in $screens {
    @media (min-width: $width) {
      font-size: $fluid-size;
    }
  }

  @media (min-width: #{$max-screen-width}px) {
    font-size: #{$max-font-size}px;
  }
}

@mixin box-shadow($size) {
  box-shadow: map-get($box-shadows, $size);
}

@mixin border-radius($sizes...) {
  // mixin accepts variadic arguments
  // pass one value for all corners
  // pass two values for x and y values
  // pass 4 values for individual corners
  // top-left, top-right, bottom-right, bottom-left
  $values: ();

  @each $size in $sizes {
    $values: append($values, map-get($border-radius, $size));
  }

  border-radius: $values;
}

@mixin fixed-ratio($width, $height) {
  position: relative;

  &:after {
    content: '';
    display: block;
    padding-bottom: percentage($height / $width);
  }

  img {
    position: absolute;
    width: auto;
    height: 100%;
    object-fit: cover;
  }
}

@mixin focus-outline-rounded() {
  box-shadow: 0 0 0 2px color('white'), 0 0 0 4px color('blue');
}

@mixin focus-outline() {
  outline: 1px solid color('blue');
  outline-offset: 1px;
}

@mixin star-birds($color) {
  background-image: url('/img/star-birds-#{$color}.svg');
  background-repeat: no-repeat;
  background-size: contain;
}

@mixin sr-only() {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  border: 0;
}

@mixin overlay($opacity) {
  background-color: rgba(color('black'), map-get($overlays, $opacity));
}
